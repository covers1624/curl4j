plugins {
    id 'java-library'
    id 'maven-publish'
    id 'c'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
    withSourcesJar()
}

group 'net.covers1624'
version '1.0-SNAPSHOT'

def os = getOsName()
def arch = getArchName()

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    compileOnly 'com.google.code.findbugs:jsr305:3.0.2'
    compileOnly 'org.jetbrains:annotations:24.0.1'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

model {
    toolChains {
        gcc(Gcc) {
            targets 'linux_x64', 'linux_arm64'
        }
    }
    components {
        curl4j(NativeLibrarySpec) {
            targetPlatform "windows_x64"
            targetPlatform "linux_x64"
            targetPlatform "linux_arm64"
            targetPlatform "macos_x64"
            targetPlatform "macos_arm64"

            sources {
                c {
                    source {
                        srcDir 'src/main/c'
                        include '**/*.c'
                    }
                    exportedHeaders {
                        srcDir 'src/generated/c'
                        srcDir "thirdparty/libffi/build_/include"

                        var jdkDir = javaToolchains.compilerFor {
                            languageVersion = JavaLanguageVersion.of(8)
                        }.get().getMetadata().getInstallationPath()
                        srcDir jdkDir.file('include')
                        srcDir jdkDir.file('include/linux')
                        srcDir jdkDir.file('include/darwin')
                        srcDir jdkDir.file('include/win32')
                    }
                }
            }
            binaries {
                all {
                    linker.args "-L${projectDir}/thirdparty/libffi/build_/.libs", "-lffi"
                }
            }
        }
    }

    platforms {
        windows_x64 {
            architecture "x64"
        }
        linux_x64 {
            architecture "x64"
        }
        linux_arm64 {
            architecture "arm64"
        }
        macos_x64 {
            architecture "x64"
        }
        macos_arm64 {
            architecture "arm64"
        }
    }

    buildTypes {
        debug
        release
    }
}

test {
    useJUnitPlatform()
}

compileJava {
    options.compilerArgs += ['-h', file('src/generated/c')]
}

tasks.withType(CCompile).configureEach {
    it.dependsOn('compileLibFFI')
}

tasks.register('compileLibFFI') {
    doFirst {
        def dir = file('thirdparty/libffi')
        def buildDir = cleanDir(new File(dir, 'build_'))
        runIn(dir, "./autogen.sh")
        runIn(buildDir, '../configure', '--enable-static', '--disable-shared', '--with-pic')
        runIn(buildDir, 'make')
    }
}

tasks.register('compileNative') {
    doFirst {
        def dir = file('build/native/')
        delete(dir)
        dir.mkdirs()
        exec {
            commandLine(['cmake', '../..'])
            workingDir(dir)
        }
        exec {
            commandLine("make")
            workingDir(dir)
        }
    }
}

publishing {
    repositories {
        if (System.getenv('MAVEN_PASS')) {
            maven {
                url "https://nexus.covers1624.net/repository/maven-snapshots/"
                credentials {
                    username 'covers1624'
                    password System.getenv('MAVEN_PASS')
                }
            }
        }
    }
    publications {
        publication(MavenPublication) {
            groupId rootProject.group
            artifactId project.archivesBaseName
            version rootProject.version

            from components.java
        }
    }
}


File cleanDir(File dir) {
    delete(dir)
    dir.mkdirs()
    return dir
}

def runIn(File dir, Object... args) {
    exec {
        commandLine(args)
        workingDir(dir)
    }
}

def getOsName() {
    def name = System.getProperty("os.name").toLowerCase(Locale.ROOT);
    if (name.contains("windows")) return 'windows'
    if (name.contains("linux")) return 'linux'
    if (name.contains("osx") || name.contains("os x") || name.contains("darwin")) return 'macos'
    if (name.contains("freebsd")) return 'freebsd'
    return 'unknown'
}

def getArchName() {
    switch (System.getProperty("os.arch").toLowerCase(Locale.ROOT)) {
        case 'i386':
        case 'x86':
            return 'x32'
        case 'x64':
        case 'x86_64':
        case 'amd64':
            return 'x64'
        case 'arm':
        case 'armv7':
        case 'armv7l':
            return 'arm32'
        case 'armv8':
        case 'aarch64':
            return 'arm64'
        default:
            return UNKNOWN
    }
}
