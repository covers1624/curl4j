plugins {
    id 'java-library'
    id 'signing'
    id 'maven-publish'
    id 'com.palantir.git-version' version '3.0.0'
    id "net.covers1624.centralpublisher" version "1.0.7"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
    withSourcesJar()
    withJavadocJar()
}

group 'net.covers1624'
version '3.0'

def details = versionDetails()
if (details.branchName == 'main') {
    version += ".${details.commitDistance}"
} else {
    version += "-SNAPSHOT"
}

def os = getOsName()
def arch = getArchName()
def libc = os == 'linux' ? (System.getenv('LIBC') ?: getLibc()) : null
def suffix = libc != null ? "-$libc" : ""
println("OS: $os")
println("Arch: $arch")
println("Libc: $libc Suffix: $suffix")
println("Version: $version")

sourceSets {
    main {
        resources.srcDirs += file('src/generated/resources')
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://maven.covers1624.net' }
}

configurations {
    testCompileOnly.extendsFrom compileOnly
}

dependencies {
    compileOnly 'com.google.code.findbugs:jsr305:3.0.2'
    compileOnly 'org.jetbrains:annotations:24.0.1'
    compileOnly 'net.covers1624:Quack:0.4.10.111'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'

    testImplementation 'org.nanohttpd:nanohttpd:2.3.1'
    testImplementation 'net.covers1624:Quack:0.4.9.77'
}

compileJava {
    options.compilerArgs += ['-h', file('src/generated/c')]
}

evaluationDependsOn(":java9")

test {
    classpath += project(":java9").sourceSets.main.output

    useJUnitPlatform()

    systemProperty('net.covers1624.curl4j.libcurl4j.name', file("native_build/install/libcurl4j/${os}/${arch}/${System.mapLibraryName("curl4j$suffix")}"))
    systemProperty('net.covers1624.curl4j.libcurl.name', file("native_build/install/libcurl/${os}/${arch}/${System.mapLibraryName("curl$suffix")}"))
}

tasks.register('testJ17', Test) {
    classpath += project(":java9").sourceSets.main.output

    useJUnitPlatform()

    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(17)
    }

    systemProperty('net.covers1624.curl4j.libcurl4j.name', file("native_build/install/libcurl4j/${os}/${arch}/${System.mapLibraryName("curl4j$suffix")}"))
    systemProperty('net.covers1624.curl4j.libcurl.name', file("native_build/install/libcurl/${os}/${arch}/${System.mapLibraryName("curl$suffix")}"))
}

check.dependsOn('testJ17')

jar {
    finalizedBy 'signJar'
    from project(":java9").sourceSets.main.output
    from(file('native_build/install/libcurl4j')) {
        into 'META-INF/natives/'
    }
}

tasks.register('jarWithLibCurl', Jar) {
    finalizedBy 'signJarWithLibCurl'
    archiveClassifier = 'libcurl'

    from sourceSets.main.output
    from project(":java9").sourceSets.main.output

    from(file('native_build/install/libcurl4j')) {
        into 'META-INF/natives/'
    }

    from(file('native_build/install/libcurl')) {
        into 'META-INF/natives/'
    }
}

assemble.dependsOn('jarWithLibCurl')

['jar', 'jarWithLibCurl'].each { t ->
    tasks.register("sign${t.capitalize()}") {
        dependsOn(t)

        doFirst {
            def args = [:]
            args['jar'] = tasks.named(t).get().archiveFile.get().asFile
            if (System.getenv("KEY_STORE")) {
                args['keyStore'] = System.getenv("KEY_STORE")
                file(System.getenv("KEY_STORE_PROPS")).withReader {
                    def props = new Properties()
                    props.load(it)
                    args.putAll(props)
                }
            } else if (System.getenv("KEY_STORE_FILE")) {
                def tempFile = File.createTempFile("jks", "jks")
                tempFile.bytes = System.getenv("KEY_STORE_FILE").decodeBase64()
                args['keyStore'] = tempFile
                def props = new Properties()
                props.load(new java.io.ByteArrayInputStream(System.getenv("KEY_STORE_PROPS_FILE").decodeBase64()))
                args.putAll(props)
            } else if (project.hasProperty('keyStore')) {
                args['keyStore'] = project.getProperty('keyStore')
                args['alias'] = project.getProperty('keyStoreAlias')
                args['storePass'] = project.getProperty('keyStorePass')
                args['keyPass'] = project.getProperty('keyStoreKeyPass')
            } else {
                println "No signing properties."
                state.setOutcome(org.gradle.api.internal.tasks.TaskExecutionOutcome.UP_TO_DATE)
                didWork = false
                return
            }
            project.ant.invokeMethod('signjar', args)
        }
    }
}

javadoc {
    options.addBooleanOption("Xdoclint:none", true)
}

publishing {
    repositories {
        if (System.getenv('MAVEN_PASS')) {
            maven {
                if (details.branchName == 'main') {
                    url 'https://nexus.covers1624.net/repository/maven-releases/'
                } else {
                    url 'https://nexus.covers1624.net/repository/maven-snapshots/'
                }
                credentials {
                    username 'covers1624'
                    password System.getenv('MAVEN_PASS')
                }
            }
        }
    }
    publications {
        curl4j(MavenPublication) {
            groupId rootProject.group
            artifactId project.archivesBaseName
            version rootProject.version

            artifact jar
            artifact sourcesJar
            artifact jarWithLibCurl

            pom {
                name = archivesBaseName
                description = archivesBaseName
                url = "https://github.com/covers1624/curl4j"
                scm {
                    url = "https://github.com/covers1624/curl4j"
                    connection = "scm:git:git://github.com/covers1624/curl4j.git"
                    connection = "scm:git:git@github.com:covers1624/curl4j.git"
                }

                issueManagement {
                    system = 'github'
                    url = "https://github.com/covers1624/curl4j/issues"
                }
                licenses {
                    license {
                        name = "MIT"
                        url = "https://raw.githubusercontent.com/covers1624/curl4j/main/LICENSE.txt"
                        distribution = 'repo'
                    }
                }
                developers {
                    developer {
                        id = 'covers1624'
                        name = 'covers1624'
                    }
                }
            }
        }
    }
}

signing {
    if (System.getenv('GPG_PRIVATE_KEY')) {
        useInMemoryPgpKeys(
                new File(System.getenv('GPG_PRIVATE_KEY')).text,
                System.getenv('GPG_PRIVATE_KEY_PASS')
        )
    } else if (System.getenv("GPG_PRIVATE_KEY_FILE")) {
        useInMemoryPgpKeys(
                new String(System.getenv('GPG_PRIVATE_KEY_FILE').decodeBase64(), java.nio.charset.StandardCharsets.UTF_8),
                System.getenv('GPG_PRIVATE_KEY_PASS')
        )
    } else if (project.hasProperty('gpgPrivateKey')) {
        useInMemoryPgpKeys(
                new File(project.getProperty('gpgPrivateKey')).text,
                project.getProperty('gpgPrivateKeyPass')
        )
    } else {
        return
    }
    sign publishing.publications.curl4j
}

def getOsName() {
    def name = System.getProperty("os.name").toLowerCase(Locale.ROOT);
    if (name.contains("windows")) return 'windows'
    if (name.contains("linux")) return 'linux'
    if (name.contains("osx") || name.contains("os x") || name.contains("darwin")) return 'macos'
    if (name.contains("freebsd")) return 'freebsd'
    return 'unknown'
}

def getArchName(arch = null) {
    if (arch == null) {
        arch = System.getProperty('os.arch')
    }
    switch (arch.toLowerCase(Locale.ROOT)) {
        case 'i386':
        case 'x86':
            return 'x32'
        case 'x64':
        case 'x86_64':
        case 'amd64':
            return 'x64'
        case 'arm':
        case 'armv7':
        case 'armv7l':
            return 'arm32'
        case 'arm64':
        case 'armv8':
        case 'aarch64':
            return 'arm64'
        default:
            throw new RuntimeException("Unknown architecture: $arch")
    }
}

def getLibc() {
    try {
        def text = 'ldd --version'.execute().text

        if (text.contains('GLIBC') || text.contains('GNU libc')) return 'gnu'
        if (text.contains('musl')) return 'musl'
    } catch (Throwable ex) {
    }
    return 'gnu'
}
